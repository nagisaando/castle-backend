AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Castle Backend - Serverless Express API
Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
    - dev
    - staging
    - prod
    Description: Environment name
  DatabaseUrl:
    Type: String
    NoEcho: true
    Description: PostgreSQL database connection string
  CorsOrigin:
    Type: String
    Default: '*'
    Description: CORS allowed origin
  DBUsername:
    Type: String
    Default: postgres
    Description: Master username for Aurora cluster
  DbName:
    Type: String
    Default: castle
    Description: Database name
Globals:
  Function:
    Runtime: nodejs20.x
    Timeout: 30
    MemorySize: 256
    Architectures:
    - arm64
    Environment:
      Variables:
        NODE_ENV:
          Ref: Environment
Resources:
  CastleBackendDBSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name:
        Fn::Sub: castle-backend-db-secret-${Environment}
      Description: Database credentials for Castle Backend
      GenerateSecretString:
        SecretStringTemplate:
          Fn::Sub: '{"username": "${DBUsername}"}'
        GenerateStringKey: password
        PasswordLength: 32
        ExcludeCharacters: '"@/\'
  CastleBackendDBCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      DBClusterIdentifier:
        Fn::Sub: castle-backend-cluster-${Environment}
      Engine: aurora-postgresql
      EngineVersion: 16.6
      MasterUsername:
        Ref: DBUsername
      ManageMasterUserPassword: true
      MasterUserSecret:
        SecretArn:
          Ref: CastleBackendDBSecret
      DatabaseName:
        Ref: DbName
      EnableHttpEndpoint: true
      ServerlessV2ScalingConfiguration:
        MinCapacity: 0.5
        MaxCapacity: 16
      DeletionProtection: false
      BackupRetentionPeriod: 7
      PreferredBackupWindow: '03:00-04:00'
      PreferredMaintenanceWindow: sun:04:00-sun:05:00
      Tags:
      - Key: Environment
        Value:
          Ref: Environment
      - Key: Project
        Value: castle-backend
  CastleBackendDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier:
        Fn::Sub: castle-backend-instance-${Environment}
      Engine: aurora-postgresql
      DBInstanceClass: db.serverless
      DBClusterIdentifier:
        Ref: CastleBackendDBCluster
      Tags:
      - Key: Environment
        Value:
          Ref: Environment
      - Key: Project
        Value: castle-backend
  CastleBackendFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: castle-backend-${Environment}
      CodeUri: CastleBackendFunction
      Handler: lambda.handler
      Policies:
      - Statement:
        - Effect: Allow
          Action:
          - rds-data:ExecuteStatement
          - rds-data:BatchExecuteStatement
          - rds-data:BeginTransaction
          - rds-data:CommitTransaction
          - rds-data:RollbackTransaction
          Resource:
            Fn::GetAtt:
            - CastleBackendDBCluster
            - DBClusterArn
        - Effect: Allow
          Action:
          - secretsmanager:GetSecretValue
          Resource:
            Ref: CastleBackendDBSecret
      Environment:
        Variables:
          CORS_ORIGIN:
            Ref: CorsOrigin
          DB_CLUSTER_ARN:
            Fn::GetAtt:
            - CastleBackendDBCluster
            - DBClusterArn
          DB_SECRET_ARN:
            Ref: CastleBackendDBSecret
          DB_NAME:
            Ref: DbName
      Events:
        ApiProxy:
          Type: Api
          Properties:
            RestApiId:
              Ref: CastleBackendApi
            Path: /{proxy+}
            Method: ANY
        ApiRoot:
          Type: Api
          Properties:
            RestApiId:
              Ref: CastleBackendApi
            Path: /
            Method: ANY
    Metadata:
      SamResourceId: CastleBackendFunction
  CastleBackendApi:
    Type: AWS::Serverless::Api
    Properties:
      Name:
        Fn::Sub: castle-backend-api-${Environment}
      StageName:
        Ref: Environment
      Cors:
        AllowMethods: '''GET,POST,PUT,DELETE,OPTIONS'''
        AllowHeaders: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
        AllowOrigin:
          Fn::Sub: '''${CorsOrigin}'''
      EndpointConfiguration:
        Type: REGIONAL
Outputs:
  ApiGatewayUrl:
    Description: API Gateway endpoint URL
    Value:
      Fn::Sub: https://${CastleBackendApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-ApiUrl
  LambdaFunctionArn:
    Description: Lambda function ARN
    Value:
      Fn::GetAtt:
      - CastleBackendFunction
      - Arn
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-LambdaArn
